
# The ilcsoft version
ilcsoftVersion="v01-19-05"

# The ilcsoft path
#ilcsoftPath="/cvmfs/ilc.desy.de/sw/x86_64_gcc49_sl6/${ilcsoftVersion}"
ilcsoftPath="/afs/desy.de/project/ilcsoft/sw/x86_64_gcc54_ub1604/${ilcsoftVersion}"

# The ilcsoft init script
ilcsoftInitScript="${ilcsoftPath}/init_ilcsoft.sh"

# The detector model to be used in the simulation
detectorModelSim="ILD_l5_v02"

# The detector model to be used in the reconstruction
detectorModelRec="ILD_l5_o1_v02"

# Path to the compact file in the lcgeo project, to be used in the simulation
lcgeoCompactFileSim="ILD/compact/${detectorModelSim}/${detectorModelSim}.xml"

# Path to the compact file in the lcgeo project, to be used in the reconstruction
lcgeoCompactFileRec="ILD/compact/${detectorModelRec}/${detectorModelRec}.xml"

# The path where to store output files or to read input files
# lcCalibrationPool="/afs/desy.de/group/flc/pool/${USER}/LCCalibration"
lcCalibrationPool="$PWD/LCCalibration"

# The version of ILDConfig to get the ddsim steering file from.
# wget is called to download the file
ddsimSteeringFileVersion="master"

# The ddsim steering file for simulation
ddsimSteeringFile="ddsim_steer.py"

# The number of events to process in ddsim
numberOfEventsSim="200"

# The number of events to process in Marlin
numberOfEventsRec="2000"

# The physics list used for simulating single particles
physicsList="QGSP_BERT"

# The ECal calibration accuracy
ecalCalibrationAccuracy="0.01"

# The HCal calibration accuracy
hcalCalibrationAccuracy="0.01"

# The muon energy to be used for calibration
muonCalibrationEnergy="10"

# The photom energy to be used for calibration
photonCalibrationEnergy="10"

# The kaon0L energy to be used for calibration
kaon0LCalibrationEnergy="20"

# The kaon0L energies for software compensation training
softwareCompensationKaon0LEnergies="$(seq 10 10 90)"

# Path to pandora settings file in the ILDConfig directory
pandoraSettingsFile="PandoraSettings/PandoraSettingsDefault.xml"

# The git repo to clone when running the calibration
# lcCalibrationGitRepo="https://github.com/rete/LCCalibration.git"
lcCalibrationGitRepo="https://github.com/iLCSoft/LCCalibration.git"
#lcCalibrationGithubRepo="/some/local/path"

# The LCCalibration version or branch to use
# If empty, uses master anyway
lcCalibrationVersion="master"
# lcCalibrationVersion="pandora-settings-arg"

#
ildConfigGitRepo="https://github.com/iLCSoft/ILDConfig.git"

#
ildConfigVersion="master"

# Function to download the ddsin steering file from Github
downloadDDSimSteeringFile() {
  echo " -- Downloading ddsim steering file from github: steering file: $1, version: $2"
  wget -O $1 https://raw.githubusercontent.com/iLCSoft/ILDConfig/$2/StandardConfig/production/${ddsimSteeringFile}
  status=$?
  if [ ${status} != 0 ]
  then
    echo "Couldn't get the ddsim steering file from github (status ${status})!"
    exit 1
  fi
}

# Function to print all the settings present in this steering file 
printSettings() {
  echo "============= settings =============="
  echo "ilcsoftVersion                : ${ilcsoftVersion}"
  echo "ilcsoftPath                   : ${ilcsoftPath}"
  echo "ilcsoftInitScript             : ${ilcsoftInitScript}"
  echo "detectorModelSim              : ${detectorModelSim}"
  echo "detectorModelRec              : ${detectorModelRec}"
  echo "lcgeoCompactFileSim           : ${lcgeoCompactFileSim}"
  echo "lcgeoCompactFileRec           : ${lcgeoCompactFileRec}"
  echo "lcCalibrationPool             : ${lcCalibrationPool}"
  echo "ddsimSteeringFileVersion      : ${ddsimSteeringFileVersion}"
  echo "ddsimSteeringFile             : ${ddsimSteeringFile}"
  echo "numberOfEventsSim             : ${numberOfEventsSim}"
  echo "numberOfEventsRec             : ${numberOfEventsRec}"
  echo "physicsList                   : ${physicsList}"
  echo "====================================="
}

cloneLCCalibrationGitRepo() {
  repository=$1
  version=$2
  LCCalibrationDirectory=`mktemp --directory -p . LCCalibration_XXXXXX`
  git clone ${repository} ${LCCalibrationDirectory}
  status=$?
  if [ ${status} != 0 ]
  then
    echo "Couldn't clone the LCCalibration repository at the address '${repository}' (status ${status})!"
    exit 1
  fi
  currentDir=$PWD
  cd ${LCCalibrationDirectory}
  git checkout ${version}
  status=$?
  if [ ${status} != 0 ]
  then
    echo "Couldn't checkout on version ${version} of LCCalibration (status ${status})!"
    exit 1
  fi
  cd ${currentDir}
  export LCCalibration=${LCCalibrationDirectory}
  #echo "${LCCalibrationDirectory}"
}

cloneILDConfigGitRepo() {
  repository=$1
  version=$2
  ILDConfigDirectory=`mktemp --directory -p . ILDConfig_XXXXXX`
  git clone ${repository} ${ILDConfigDirectory}
  status=$?
  if [ ${status} != 0 ]
  then
    echo "Couldn't clone the ILDConfig repository at the address '${repository}' (status ${status})!"
    exit 1
  fi
  currentDir=$PWD
  cd ${ILDConfigDirectory}
  git checkout ${version}
  status=$?
  if [ ${status} != 0 ]
  then
    echo "Couldn't checkout on version ${version} of ILDConfig (status ${status})!"
    exit 1
  fi
  cd ${currentDir}
  export ILDConfig=${ILDConfigDirectory}
  #echo "${ILDConfigDirectory}"
}

